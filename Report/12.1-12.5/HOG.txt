public:

	enum { L2Hys=0 };

	enum { DEFAULT_NLEVELS=64 };
	Size winSize;
    
	Size blockSize;

	Size blockStride;

	Size cellSize;

	int nbins;

	int derivAperture;

	double winSigma;

	int histogramNormType;

	double L2HysThreshold;

	bool gammaCorrection;

	vector<float> svmDetector;

	int nlevels;

	HOGDescriptor();
	virtual ~HOGDescriptor() {}

	size_t getDescriptorSize() const;
	bool checkDetectorSize() const;
	double getWinSigma() const;
	
	virtual void setSVMDetector(InputArray _svmdetector);
	
	 virtual void compute(const Mat& img,

                         CV_OUT vector<float>& descriptors,

                         Size winStride=Size(), Size padding=Size(),

                         const vector<Point>& locations=vector<Point>()) const;
	//with found weights output
	virtual void detect(const Mat& img, CV_OUT vector<Point>& foundLocations,

                        CV_OUT vector<double>& weights,

                        double hitThreshold=0, Size winStride=Size(),

                        Size padding=Size(),

                        const vector<Point>& searchLocations=vector<Point>()) const;
	//without found weights output

   	virtual void detect(const Mat& img, CV_OUT vector<Point>& foundLocations,
                        double hitThreshold=0, Size winStride=Size(),

                        Size padding=Size(),

                        const vector<Point>& searchLocations=vector<Point>()) const;

	//without found weights output

    	virtual void detectMultiScale(const Mat& img, CV_OUT vector<Rect>& foundLocations,

                                  double hitThreshold=0, Size winStride=Size(),

                                  Size padding=Size(), double scale=1.05,

                                  double finalThreshold=2.0, bool useMeanshiftGrouping = false) const;


    	virtual void computeGradient(const Mat& img, CV_OUT Mat& grad, CV_OUT Mat& angleOfs,
                                 			Size paddingTL=Size(), Size paddingBR=Size()) const;

	static vector<float> getDefaultPeopleDetector();

	static vector<float> getDaimlerPeopleDetector();



#include <iostream>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;

#define CV_CAP_ANY "C:\\Users\\Administrator\\Desktop\\Dataset\\Outdoor\\sidesync.avi"

int main (int argc, const char * argv[])
{
	/*VideoCapture cap(CV_CAP_ANY);
	cap.set(CV_CAP_PROP_FRAME_WIDTH, 320);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, 240);

	if (!cap.isOpened())
	return -1;
	*/
	Mat img;
	HOGDescriptor hog;
	hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());

	namedWindow("video capture", CV_WINDOW_AUTOSIZE);

	double t = (double)getTickCount();
	//cap >> img;
	img = imread("123.png");

	if (!img.data)
		return -1;
	
	vector<Rect> found, found_filtered;
	hog.detectMultiScale(img, found, 0, Size(8,8), Size(32,32), 1.05, 2);

	size_t i, j;
	for (i=0; i<found.size(); i++)
	{
		Rect r = found[i];
		for (j=0; j<found.size(); j++)
			if (j!=i && (r & found[j])==r)
				break;
		if (j==found.size())
			found_filtered.push_back(r);
	}
	for (i=0; i<found_filtered.size(); i++)
	{
		Rect r = found_filtered[i];
		/*r.x += cvRound(r.width*0.1);
		r.width = cvRound(r.width*0.8);
		r.y += cvRound(r.height*0.06);
		r.height = cvRound(r.height*0.9);*/
		rectangle(img, r.tl(), r.br(), cv::Scalar(0,255,0), 2);
	}
	imshow("video capture", img);

	t = (double)getTickCount() - t;
	cout << "cost time: " << t*1000/getTickFrequency() << " ms" << endl;

	cvWaitKey(0);


	return 0;
}